<?php
define("JS_DATA_DIVIDER", "~~");
define("JS_PARAM_DIVIDER", '^');
define("JS_FIELD_DIVIDER", '||');

abstract class ReportLauncher
{
	private $socket;		// Holds the connected socket to the server	
	
	private $port;			// The port that the Jasper Server is running on
	private $host;			// The host name for the Jasper Server
	private $data; 			// The data string to send to the report when generating it.
	public $appID;			// The name of the application - this should map directly to the folder name where the reports are stored.
	public $reportFile;		// The name of the jasper report file
	private $outputType;    // One of PDF, XLS, CSV, RTF - Default is PDF
	private $databaseRequired;	// Set to true if a connection to a database is required.
	private $reportReady;	// Boolean flag that is set to true once the report is ready for pickup.
	
	public function __construct($port = "59100", $host = "localhost")
	{
		// Set class variables to default values.
		$this->port = $port;	
		$this->host = $host;
		$this->data = "";
		$this->socket = null;
		$this->appID = "";
		$this->reportFile = "";
		$this->outputType = "PDF";
		$this->databaseRequired = false;
		$this->reportReady = false;
	}
	
	/***
	* @method getReport
	* @abstract 
	* 
	*/
	public function createReport(&$error_message = "")
	{
		// Create a IPV4 TCP Socket
		$this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
		
		// Connect to the server
		if(!socket_connect($this->socket, $this->host, $this->port))
		{
			$error_message = "Could not connect to server";
			return false;			
		}
		
		// The server will send a response identifying itself
        $response = $this->_getResponse();	
        
        if(!stristr($response, "JASPER SERVER V1 AT YOUR SERVICE"))
        {
			$this->_clean_up();	
			
			$error_message = "Invalid response from server";
			return false;
        }
        
		// Formulate the auth string to send to the server
		$appID = "Blueprint";
		$outputType = "PDF";
		$databaseRequired = 1;
		
		$authStr = $appID . JS_DATA_DIVIDER . $this->reportFile . JS_DATA_DIVIDER . $outputType . JS_DATA_DIVIDER . $databaseRequired;
		
		// If a data params string has been defined, append it to the auth string.
		if($this->data != "")
		{
			$authStr .= JS_DATA_DIVIDER . $this->data;
		}
		
		// Send the auth string to the server
		$bytes = socket_write($this->socket, $authStr . "\n");
		
		// The server will send a response now.  
        $response = $this->_getResponse();
        
        if(!stristr($response, "REPORT READY"))
        {
			$this->_clean_up();
			
			$error_message = "The report was not generated by the server";
			return false;			
        }
		
		// If we make it to here, the report WAS generated OK
		$this->reportReady = true;
		
		return true;
	}
	
	public function getReport(&$result = "")
	{
		if(!$this->reportReady)	
			return false;
			
		// Send the GET REPORT command to the server
		$bytes = socket_write($this->socket, "GET REPORT" . "\n");
		
		// The server will send a response now.  
        $result = $this->_getResponse(false);		
        
        $responseHeader = substr($result, 0, 20);
        
        // Check for an error in the server response
        if(($responseHeader == "") || (stristr($responseHeader, "ERROR")))
        {
        	$this->_clean_up();  
			return false;
        }
        
        $this->_clean_up();  
        
        return true;
	}
	
	protected function _clean_up()
	{
		// Close the socket
		socket_close($this->socket);
	}
	
	/***
	* @method _getResponse
	* @author Andrew Chapman
	* @created 05/05/2011
	* 
	* @abstract This method reads a response from the Jasper Reports server. 
	*/
	protected function _getResponse($waitForNewline = true)
	{
		// Define variables
		$x = 0;
		$responseLen = "";
		$response = "";
		
		// The first nine characters of the server response tell us how long the rest of the
		// message is.  A response might be 000000032, which tell us the response is 32 bytes long.
		// Note that the 9 character limit means that the response has a maximum size of
		// 999999999 bytes (roughly 100 meg).
		$responseLen = socket_read($this->socket, 9);
        $responseLen = intval($responseLen);
        
        $maxLoop = $responseLen;
        
        if($waitForNewline)
        {
        	// Make an allowance for the newline \r\n characters
        	$maxLoop += 1;
		}
        
        // Read in the rest of the response 1024 kbs at a time.
        // Keep reading from the socket until we've read the whole message
        while(strlen($response) < $maxLoop)
        {
            $char = socket_read($this->socket, 1024);
            $response .= $char;
        }  
        
        return $response;		
	}   
	
	/***
	* @method buildReportData
	* @author Andrew Chapman
	* @created 07/05/2011
	* 
	* Use this method to build a report data string compatible with JasperServer params.
	* The key/value pairs are sent to the Jasper Report as reports params.
	* 
	* @param array $reportFields An array of field names to look for.
	* 
	* @return - The report data string delimited as appropriate.
	*/
	protected function buildReportData($reportFields = array())
	{
		$reportData = "";
		
		foreach($_POST as $postKey => $postValue)
		{
			if(in_array($postKey, $reportFields))
			{
				if($reportData != "")
				{
					$reportData .= JS_PARAM_DIVIDER;	
				}
				
				$postValue = str_replace("\n", "\\n", $postValue);
				
				$reportData .= $postKey . "=" . $postValue;
			}
		}
		
		return $reportData;		
	}	
	
	/*************** GET AND SET METHODS *****************/
	public function setData($data)
	{
		$this->data = $data;
	}
	
	/***
	* @method setOutputType
	* @author Andrew Chapman
	* @created 07/05/2011
	* 
	* @param string $outputType - The desired report output typr
	* @returns True if the output type is set successfully, false on failure.
	*/
	public function setOutputType($outputType)
	{
		// Define valid report output types
		$validTypes = array("PDF", "XLS", "RTF", "CSV");             
		
		// Make sure the output type is in upper case
		$outputType = strtoupper($outputType);
		
		// Makesure output type is valid.
		if(($outputType == "") || (!in_array($outputType, $validTypes)))
			return false;
		
		// Set the output type
        $this->outputType = $outputType;
        
        return true;
	}
	
	/***
	* @method setDatabaseRequired
	* @author Andrew Chapman
	* @created 08/05/2011
	* 
	* Sets the database required flag - will cause JasperServer
	* to connect to MySQL and pass in the active connection to the reports engine.
	* 
	*/
	public function setDatabaseRequired()
	{
		$this->databaseRequired = true;
	}	
	
	/***
	* @method setReportFile
	* @author Andrew Chapman
	* @created 25/06/2011
	* 
	* Sets the Jasper report file that will be used to generate the report.
	* 
	*/
	public function setReportFile($reportFile)
	{
		$this->reportFile = $reportFile;
	}	
	
	
	/***
	* @method mysqlConnect
	* @author Andrew Chapman
	* @created 08/05/2011
	* 
	* Connects to mysql and retuns the connection.
	* 
	* @param mixed $host - MySQL host name
	* @param mixed $database - MySQL database name
	* @param mixed $username - MySQL username
	* @param mixed $password - MySQL password
	* 
	* @return resource - The database connection.
	*/
	public function mysqlConnect($host, $database, $username, $password)
	{
		// Connect to mysql
		$conn = mysql_connect($host, $username, $password);
		
		// If the connection failed, return false.
		if(!$conn)            
		{
			return false;
		}
		
		// Select the correct database.
		$db_selected = mysql_select_db($database, $conn);
		
		if(!$db_selected)
		{
			// DB select failed.
			mysql_close($conn);
			
			return false;
		}
		
		// All ok - return the connection.
		return $conn;
	}
	
	/***
	* @method createBatchID
	* @author Andrew Chapman
	* @created 07/05/2011
	* 
	* Creates a unique 10 character batch ID for a given mysql table
	* 
	* @param mysql_connection $conn An active MySQL connection
	* @param string $table The name of the mysql table to make a unique batch ID for
	* 
	* @returns a 10 character batch ID
	*/
	protected function createBatchID($conn, $table)
	{
		// Define valid batch ID characters
		$allowed_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789*()@!#-_+";
		$num_chars = strlen($allowed_chars);
		
		srand();	// Seed the random number generated
		
		// Continue searching for a unique batchID until one is found
		$unique = false;
		
		while(!$unique)
		{
			// Reset batch ID
			$batchID = "";
			
			// Create a random 10 character batch ID string
			for($x = 0; $x < 10; $x++)
			{
				$batchID .= substr($allowed_chars, rand(0, $num_chars - 1), 1); 
			}
			
			// Are any other records in this table using this batchID?
			$query = "SELECT COUNT(*) " .
					"FROM $table " .
					"WHERE batchid = '%s'";
					
			$query = sprintf($query, $batchID);
			
			$result = mysql_query($query, $conn);
			if(!$result)
			{
				die("Failure creating batchID!");
			}
			
			$row = mysql_fetch_row($result);
			
			if($row[0] == 0)
			{
				// The batchID is unique
				$unique = true;
			}
		}
		
		return $batchID;
	}
	
	/***
	* convertCurrencySymbol
	* Converts a BillBot currency number (1-4) back to the
	* appropriate currency symbol character.
	* 
	* @param integer $currencyNumeric  A number from 1-4
	* @return char The currency symbol
	*/
	public function convertCurrencySymbol($currencyNumeric)
	{
		if($currencyNumeric == 1)
		{
			return '$';
		}		
		else if($currencyNumeric == 2)
		{
			return "£";
		}
		else if($currencyNumeric == 3)
		{
			return "€";
		}
		else if($currencyNumeric == 4)
		{
			return "F";
		}		
		else
		{
			return '$';	
		}
	}
}